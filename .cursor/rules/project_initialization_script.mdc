---
description: 새로운 프로젝트 일관된 초기화 스크립트 및 워크플로우
globs: **/*
alwaysApply: true
---

# 프로젝트 초기화 자동화 스크립트

## 🚀 통합 프로젝트 초기화 워크플로우

### 1. **프로젝트 타입별 초기화 스크립트**

#### FastAPI 프로젝트 초기화
```bash
#!/bin/bash
# fastapi-init.sh

PROJECT_NAME=$1
PROJECT_TYPE="fastapi"

if [ -z "$PROJECT_NAME" ]; then
    echo "❌ 사용법: ./fastapi-init.sh <프로젝트명>"
    exit 1
fi

echo "🚀 FastAPI 프로젝트 '$PROJECT_NAME' 초기화를 시작합니다..."

# 1. 프로젝트 디렉토리 생성 및 이동
mkdir -p "$PROJECT_NAME"
cd "$PROJECT_NAME"

# 2. Git 초기화 (프로젝트 루트에서)
git init
git config user.name "$(git config --global user.name)"
git config user.email "$(git config --global user.email)"

# 3. pyproject.toml 생성
cat > pyproject.toml << EOF
[project]
name = "$PROJECT_NAME"
version = "0.1.0"
description = "FastAPI application"
authors = [
    { name = "$(git config user.name)", email = "$(git config user.email)" }
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.23.2",
    "gunicorn>=21.2.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = "E203, W503"

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
EOF

# 4. 기본 FastAPI 앱 생성
cat > main.py << EOF
from fastapi import FastAPI

app = FastAPI(
    title="$PROJECT_NAME",
    description="FastAPI application",
    version="0.1.0"
)

@app.get("/")
async def root():
    return {"message": "Hello World"}

@app.get("/health")
async def health():
    return {"status": "healthy"}
EOF

# 5. 테스트 디렉토리 및 기본 테스트 생성
mkdir -p tests
cat > tests/__init__.py << EOF
# Tests package
EOF

cat > tests/test_main.py << EOF
from fastapi.testclient import TestClient
from main import app

client = TestClient(app)

def test_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello World"}

def test_health():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "healthy"}
EOF

# 6. Dockerfile 생성
cat > Dockerfile << EOF
FROM python:3.11-slim

# uv 설치
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /usr/local/bin/

WORKDIR /app

# 의존성 설치
COPY pyproject.toml uv.lock* ./
RUN uv sync --frozen --no-dev

# 앱 코드 복사
COPY . .

# 앱 실행
CMD ["uv", "run", "gunicorn", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "main:app", "-b", "0.0.0.0:8000"]
EOF

# 7. docker-compose.yml 생성
cat > docker-compose.yml << EOF
version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
    volumes:
      - .:/app
    command: uv run uvicorn main:app --host 0.0.0.0 --port 8000 --reload
EOF

# 8. Makefile 생성
cat > Makefile << EOF
.PHONY: install dev test lint format clean

install:
	@echo "▶ uv를 사용하여 의존성을 설치합니다..."
	uv sync --dev

dev:
	@echo "▶ 개발 서버를 실행합니다..."
	uv run uvicorn main:app --reload --host 0.0.0.0 --port 8000

test:
	@echo "▶ 테스트를 실행합니다..."
	uv run pytest

lint:
	@echo "▶ 코드 린팅을 실행합니다..."
	uv run black --check .
	uv run isort --check-only .
	uv run flake8 .

format:
	@echo "▶ 코드를 포맷팅합니다..."
	uv run black .
	uv run isort .

clean:
	@echo "▶ 캐시 및 임시 파일을 정리합니다..."
	rm -rf .pytest_cache
	rm -rf .mypy_cache
	rm -rf htmlcov
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete

docker-build:
	@echo "▶ Docker 이미지를 빌드합니다..."
	docker build -t $PROJECT_NAME .

docker-run:
	@echo "▶ Docker 컨테이너를 실행합니다..."
	docker run -p 8000:8000 $PROJECT_NAME

docker-compose-up:
	@echo "▶ Docker Compose로 서비스를 시작합니다..."
	docker-compose up -d

docker-compose-down:
	@echo "▶ Docker Compose 서비스를 중지합니다..."
	docker-compose down
EOF

# 9. .gitignore 생성
cat > .gitignore << EOF
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Testing
.pytest_cache/
.coverage
htmlcov/
.tox/
.nox/
coverage.xml
*.cover
.hypothesis/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# uv
.uv/
uv.lock

# Docker
.dockerignore
EOF

# 10. README.md 생성
cat > README.md << EOF
# $PROJECT_NAME

FastAPI 기반 웹 애플리케이션

## 🚀 빠른 시작

### 1. 의존성 설치
\`\`\`bash
uv sync --dev
\`\`\`

### 2. 개발 서버 실행
\`\`\`bash
make dev
# 또는
uv run uvicorn main:app --reload --host 0.0.0.0 --port 8000
\`\`\`

### 3. Docker로 실행
\`\`\`bash
make docker-compose-up
\`\`\`

## 📁 프로젝트 구조

\`\`\`
$PROJECT_NAME/
├── .github/
│   └── workflows/
│       └── ci.yml              # GitHub Actions CI/CD
├── tests/
│   ├── __init__.py
│   └── test_main.py            # 테스트 파일
├── main.py                     # FastAPI 애플리케이션
├── pyproject.toml              # uv 프로젝트 설정
├── uv.lock                     # 의존성 잠금 파일
├── Dockerfile                  # Docker 설정
├── docker-compose.yml          # Docker Compose 설정
├── Makefile                    # 개발 명령어
├── README.md                   # 프로젝트 문서
└── .gitignore                  # Git 무시 파일
\`\`\`

## 🛠️ 개발 명령어

- \`make install\` - 의존성 설치
- \`make dev\` - 개발 서버 실행
- \`make test\` - 테스트 실행
- \`make lint\` - 코드 린팅
- \`make format\` - 코드 포맷팅
- \`make clean\` - 캐시 정리

## 🔄 CI/CD

GitHub Actions를 통한 자동화된 CI/CD 파이프라인이 설정되어 있습니다.

- 코드 품질 검사 (linting, type checking)
- 자동 테스트 실행
- Docker 이미지 빌드
- 보안 스캔
EOF

# 11. GitHub Actions 워크플로우 생성
mkdir -p .github/workflows
cat > .github/workflows/ci.yml << EOF
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.3.0"

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: \${{ env.UV_VERSION }}

    - name: Set up Python \${{ matrix.python-version }}
      run: uv python install \${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run linting
      run: |
        uv run black --check .
        uv run isort --check-only .
        uv run flake8 .

    - name: Run type checking
      run: uv run mypy .

    - name: Run tests
      run: uv run pytest -v

  build:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: \${{ github.actor }}
        password: \${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/\${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: \${{ steps.meta.outputs.tags }}
        labels: \${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: \${{ env.UV_VERSION }}

    - name: Set up Python
      run: uv python install \${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run security scan
      run: |
        uv run pip install safety bandit
        uv run safety check
        uv run bandit -r . -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
        retention-days: 30
EOF

# 12. uv 의존성 설치
echo "▶ uv를 사용하여 의존성을 설치합니다..."
uv sync --dev

# 13. 첫 커밋
echo "▶ 첫 커밋을 생성합니다..."
git add .
git commit -m "Initial commit: init"

echo "✅ FastAPI 프로젝트 '$PROJECT_NAME' 초기화가 완료되었습니다!"
echo ""
echo "📋 다음 단계:"
echo "1. cd $PROJECT_NAME"
echo "2. make dev  # 개발 서버 실행"
echo "3. GitHub 저장소 생성 후 연결"
echo "4. git remote add origin <저장소URL>"
echo "5. git push -u origin main"
```

## 🎯 사용법

### 1. **스크립트 다운로드 및 실행**
```bash
# 스크립트를 다운로드하고 실행 권한 부여
chmod +x fastapi-init.sh

# 프로젝트 생성
./fastapi-init.sh my-awesome-api
```

### 2. **수동 초기화 (단계별)**
```bash
# 1. 프로젝트 디렉토리 생성
mkdir my-project && cd my-project

# 2. Git 초기화
git init
git config user.name "Your Name"
git config user.email "your.email@example.com"

# 3. pyproject.toml 생성 (위 템플릿 사용)

# 4. 기본 파일들 생성 (main.py, tests/, Dockerfile 등)

# 5. uv 의존성 설치
uv sync --dev

# 6. 첫 커밋
git add .
git commit -m "Initial commit: init"
```

## 🔧 프로젝트 타입별 확장

### Django 프로젝트
- `django-init.sh` 스크립트 생성
- Django 특화 설정 파일들 추가

### Flask 프로젝트  
- `flask-init.sh` 스크립트 생성
- Flask 특화 설정 파일들 추가

### Node.js 프로젝트
- `nodejs-init.sh` 스크립트 생성
- package.json, npm/yarn 설정 추가

## ⚠️ 주의사항

1. **프로젝트 루트에서만 실행**: 절대 상위 디렉토리에서 실행하지 말 것
2. **Git 사용자 정보 확인**: 실행 전 `git config --global user.name` 설정 확인
3. **uv 설치 확인**: `uv --version` 명령어로 설치 상태 확인
4. **Docker 설치 확인**: Docker 및 Docker Compose 설치 상태 확인

## 🚀 자동화된 초기화의 장점

- **일관성**: 모든 프로젝트가 동일한 구조와 설정을 가짐
- **시간 절약**: 수동 설정 시간을 대폭 단축
- **실수 방지**: 검증된 템플릿으로 실수 최소화
- **표준화**: 팀 내 프로젝트 구조 표준화