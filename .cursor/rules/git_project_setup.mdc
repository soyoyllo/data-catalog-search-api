---
description: Git 프로젝트 초기화 및 폴더 구조 설정 시 주의사항
globs: **/*
alwaysApply: true
---

# Git 프로젝트 초기화 및 폴더 구조 설정 가이드

## 🚨 절대 하지 말아야 할 실수들

### 1. **Git 초기화 위치 오류**
- **❌ 잘못된 방법**: 상위 디렉토리에서 `git init` 실행
- **✅ 올바른 방법**: 프로젝트 루트 디렉토리에서 `git init` 실행

```bash
# ❌ 잘못된 예시
cd /Users/user/Desktop/Projects
git init  # 이렇게 하면 절대 경로로 커밋됨

# ✅ 올바른 예시
cd /Users/user/Desktop/Projects/my-project
git init  # 프로젝트 루트에서 초기화
```

**결과**: 절대 경로(`Desktop/Projects/my-project/`) 대신 상대 경로(`my-project/`)로 깔끔하게 표시

### 2. **폴더 구조 파악 실패**
- **❌ 잘못된 방법**: 하위 폴더(`api/`, `src/` 등)를 프로젝트 루트로 착각
- **✅ 올바른 방법**: 실제 프로젝트 루트 디렉토리 확인 후 작업

```bash
# 프로젝트 구조 확인
ls -la
# main.py, pyproject.toml 등이 있는 디렉토리가 진짜 루트
```

### 3. **README 파일 업데이트 누락**
- **❌ 잘못된 방법**: 코드 변경 후 README 업데이트 깜빡
- **✅ 올바른 방법**: 변경사항이 있으면 Github push전에 README 업데이트

## 📋 체크리스트

### Git 초기화 전
- [ ] 현재 디렉토리가 프로젝트 루트인지 확인
- [ ] `main.py`, `pyproject.toml` 등 핵심 파일들이 현재 디렉토리에 있는지 확인
- [ ] Git 사용자 정보 설정: `git config user.name`, `git config user.email`

### 폴더 구조 정리 시
- [ ] 기존 파일들을 새 위치로 이동
- [ ] `pyproject.toml` 경로 수정
- [ ] `Dockerfile` 경로 수정
- [ ] GitHub Actions 워크플로우 경로 수정
- [ ] **README.md 업데이트** (변경된 구조 반영)

### Git 커밋 전
- [ ] 모든 파일이 상대 경로로 표시되는지 확인: `git status`
- [ ] README.md가 최신 상태인지 확인
- [ ] 불필요한 파일들이 `.gitignore`에 포함되어 있는지 확인

## 🔧 자주 사용하는 명령어

```bash
# 프로젝트 루트 확인
pwd
ls -la

# Git 초기화 (프로젝트 루트에서)
git init
git config user.name "Your Name"
git config user.email "your.email@example.com"

# 첫 커밋
git add .
git commit -m "Initial commit: init"

# GitHub 연결
git remote add origin https://github.com/username/repo.git
git push -u origin main
```

## ⚠️ 주의사항

1. **절대 상위 디렉토리에서 Git 초기화하지 말 것**
2. **폴더 구조 변경 시 모든 설정 파일 경로 수정 필수**
3. **README.md 업데이트는 선택사항이 아닌 필수사항**
4. **사용자가 "실행하지마"라고 명시적으로 요청하면 절대 실행하지 말 것**